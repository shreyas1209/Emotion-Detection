# -*- coding: utf-8 -*-
"""Emotion_models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fC8CUCHGFJnW_HmbWTENAx2H-ppRRpSS
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import time


def conv2d_block(in_channels,out_channels,kernel = 3, pad = 1,stride_val=1):
    block = nn.Sequential(nn.Conv2d(in_channels, out_channels, kernel_size=kernel, padding= pad,stride = stride_val,bias = False),
              nn.BatchNorm2d(out_channels), 
              nn.ReLU(inplace=True))
    return block

def res_block(in_channels,out_channels,kernel = 3, pad = 1,stride_val=1):
    block = nn.Sequential(
        conv2d_block(in_channels, out_channels, kernel=kernel, pad= pad,stride_val = stride_val),
        nn.Conv2d(in_channels, out_channels, kernel_size = 3, padding = 1,stride = stride_val,bias = False), 
        nn.BatchNorm2d(out_channels))
    return block

#Output height = (Input height + padding height top + padding height bottom - kernel height) / (stride height) + 1

#Output width = (Output width + padding width right + padding width left - kernel width) / (stride width) + 1
class emonet(nn.Module):
  
      
    
  def __init__(self,output_classes,in_channels=1):
    super(emonet, self).__init__()
    self.conv1 = conv2d_block(1,4,kernel = 3, pad = 1 )
    self.conv2 = conv2d_block(4,8,kernel = 3, pad = 1 )   # 48 x 48
    self.res1 = res_block(8,8) #48 x 48
    self.conv3 = conv2d_block(8,16,kernel = 3, pad = 1 )   # 48 x 48
    self.pool1 = nn.MaxPool2d(2) #24x24
    self.conv4 = conv2d_block(16,32,kernel = 3, pad = 1 ) # 24 x 24
    self.pool2 = nn.MaxPool2d(2) #12X12
    self.res2 = res_block(32,32) #12x12
    self.conv5 = conv2d_block(32,64,kernel = 3, pad = 1  )   #  12x12
    self.pool3 = nn.MaxPool2d(2) #6x6
    self.conv6 = conv2d_block(64,128,kernel = 3, pad = 1 ) #6x6
    self.pool4 = nn.MaxPool2d(2) #3x3
    self.res3 = res_block(128,128) #3x3
    self.pool5 = nn.AvgPool2d(3) #1x1
    self.output = nn.Linear(128,output_classes)

  def forward(self,x):
    
    x = self.conv1(x)
    x = self.conv2(x)
    x = F.relu(self.res1(x)+x)
    x = self.conv3(x)
    x = self.pool1(x)
    x = self.conv4(x)
    x = self.pool2(x)
    x = F.relu(self.res2(x)+x)
    x = self.conv5(x)
    x = self.pool3(x)
    x = self.conv6(x)
    x = self.pool4(x)
    x = F.relu(self.res3(x)+x)
    x = self.pool5(x)
    x = x.view(-1, x.shape[1]*x.shape[2]*x.shape[3])
    x = self.output(x)
    return x



